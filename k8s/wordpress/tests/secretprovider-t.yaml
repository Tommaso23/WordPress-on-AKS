# This is a SecretProviderClass example using user-assigned identity to access your key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: keyvault-secret-class
  namespace: wordpress
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"          # Set to true for using managed identity
    userAssignedIdentityID: 8c1d7335-53f3-4bdb-8117-a64ca97c380f   # Set the clientID of the user-assigned managed identity to use
    keyvaultName: kv-bpc-test-itn-001      # Set to the name of your key vault
    cloudName: ""                         # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: mysql-database-user
          objectType: secret
          objectVersion: ""
        - |
          objectName: mysql-database-host
          objectType: secret              
          objectVersion: ""              
        - |
          objectName: mysql-database-password
          objectType: secret
          objectVersion: ""              
        - |
          objectName: mysql-database-name
          objectType: secret              
          objectVersion: ""
    tenantId: ea940877-ee38-4d12-9bc2-9d1f97d25dd7 
  secretObjects:                       # [OPTIONAL] SecretObjects defines the desired state of synced Kubernetes secret objects
    - data:
      - key: mysql-database-user        # The key in the Kubernetes secret object
        objectName: mysql-database-user  # The name of the secret in Key Vault
      - key: mysql-database-host
        objectName: mysql-database-host
      - key: mysql-database-password
        objectName: mysql-database-password
      - key: mysql-database-name
        objectName: mysql-database-name
      secretName: keyvault-secrets
      type: Opaque                       # The namespace where the secret will be created
  